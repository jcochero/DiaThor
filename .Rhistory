}
speciesrow <- species_df[,"species"]
row.names(species_df) <- speciesrow  #converts the species names to rownames
species_df<- species_df[ , !(names(species_df) == "species")] #removes the species names column
} else {
#check if species names are in the first column
stop("Calculations cancelled. File should contain a column named 'species' with the species list")
}
#Reorder alphabetically
#species_df <- species_df[order(row.names(species_df)),] #reorder alphabetically
#Find empty samples
colvector <- c()
for (i in 1:ncol(species_df)){
if (is.numeric(species_df[,i])){
if (colSums(species_df[i], na.rm=TRUE) == 0){
colvector <- c(colvector, i)
}
}
}
if (length(colvector) != 0){
if (!is.na(colvector)){
print(paste("Empty sample removed, column #", colvector))
}
species_df <- species_df[,-colvector] #entry dataframe without empty samples
}
sampleNames <- colnames(species_df) #Saves the names of the samples
#SINCE THE ACRONYM COLUMN WAS REMOVED, WE HAVE TO CREATE A new_species COLUMN
species_df$new_species <- NA
species_df$new_species <- rownames(species_df)
#removes NA in abundance data
species_df[is.na(species_df)] <- 0
########## LINK WITH DIAT.BARCODE DATABASE
#internal 'Diat.Barcode' number
intversion <- "9"
#get version number of latest 'Diat.Barcode'
dic <- read.csv("http://www.francoiskeck.fr/work/diatbarcode/dic_version.csv", header = TRUE, stringsAsFactors = FALSE)
if (exists("dic")){
#is able to check the version
version <- dic[dic$Flavor =="original",]
version <- version$Version[which.max(as.numeric(as.POSIXlt(version$Date, format = "%d-%m-%Y")))]
#compare both. If updates are needed, attempt them
if (version == intversion){
#updates are not needed
print ("No updates needed for the 'Diat.barcode' database. Proceeding!")
#load("data/dbc_offline.RData") ##takes the internal database
#dbc <- dbc_offline
dbc <- diathor::dbc_offline
} else {
#updates are needed
########--------  Diat.Barcode download attempt. If it fails, tries to use internal database
## WARNING: CRAN package does not auto-update the Diat.Barcode database
print("The diatom database in DiaThor is out of date")
###### THIS SECTION IS FOR THE CRAN PROJECT ONLY
print("The CRAN version of the package does not auto-update the internal database. But the GitHub version does!")
print("Using internal database, 'Diat.barcode' v.9.0 published on 14-09-2020")
dbc <- diathor::dbc_offline
###### END OF CRAN VERSION
###### THIS SECTION IS FOR THE GITHUB PROJECT ONLY
# print("Attempting to download diat.barcode from website")
# dbc <- diatbarcode::get_diatbarcode(version = "last") #loads the latest version of diat.barcode
# if (exists("dbc")){ #it if was able to download the new version, proceed
#   print("Latest version of Diat.barcode succesfully downloaded. Remember to credit accordingly!")
# } else { #it if was unable to download the new version, use the internal database
#   print("Latest version of Diat.barcode cannot be downloaded")
#   print("Using internal database, Diat.barcode v.8.1 published on 10-06-2020. It might need to be updated")
#   #load("data/dbc_offline.RData") ##takes the internal database
#   dbc <- dbc_offline
# }
###### END OF GITHUB VERSION
}
} else {
print("Latest version of 'Diat.barcode' unknown")
print("Using internal database, 'Diat.barcode' v.9.0 published on 14-09-2020")
dbc <- diathor::dbc_offline
}
### Double checks that database got loaded correctly or cancels alltogether
if (exists("dbc")){
} else { #if everything fails, cancels
stop("Database could not be downloaded or retrieved from internal package. Cancelling calculations")
}
########## END LINK WITH DIAT.BARCODE DATABASE
#Remove duplicate by field "species" in diat.barcode
dbc2 <- as.data.frame(dbc[!duplicated(dbc[,"species"]),]) #transforms dbc to a dataframe
ecodata <- dbc2[which(colnames(dbc2)=="species" ):ncol(dbc2)] #keeps only from the "species" column onwards, to keep the ecological data
########-------- MATCHES AND BINDS DATA SETS
# NOTE: if several species match with the same name in the diat.barcode database (multiple strains), it keeps the
# first occurence. Ecological indices usually match in all strains of the same species
#fuzzy matching
#SEARCH
rownames(species_df) <- trimws(rownames(species_df))
taxaInSp <- as.data.frame(matrix(nrow=nrow(species_df), ncol = (ncol(species_df)+ncol(ecodata))))
#species_df section
taxaInSp[1:nrow(species_df),1:ncol(species_df)] <- species_df[1:nrow(species_df),1:ncol(species_df)] #copies species_df into taxaInSp
colnames(taxaInSp)[1:ncol(species_df)] <- colnames(species_df) #copies column names
rownames(taxaInSp) <- rownames(species_df) #copies row names
taxaInSp$recognizedSp <- NA #creates a new column with the recognized species
#ecodata_section
lastcolspecies_df <-  which(colnames(taxaInSp)=="new_species") #gets last column of taxaInSp with species_df data
colnames(taxaInSp)[(lastcolspecies_df+1):(ncol(taxaInSp)-1)] <- colnames(ecodata) #copies column names
#PROGRESS BAR
pb <- txtProgressBar(min = 1, max = nrow(taxaInSp), style = 3)
for (i in 1:nrow(taxaInSp)){
searchvectr <- ecodata[stringdist::ain(ecodata[,"species"],row.names(species_df)[i], maxDist=maxDistTaxa, matchNA = FALSE),] #seaches species by species
if (nrow(searchvectr)==1){ #if it finds only one species, add that
taxaInSp[i,(lastcolspecies_df + 1):(ncol(taxaInSp)-1)] <- searchvectr
taxaInSp[i,"recognizedSp"] <- searchvectr$species
} else if (nrow(searchvectr)>1){ #if it finds multiple species, keeps the one with the lower distance
searchvectr <- searchvectr[which(stringdist::stringdist(searchvectr$species, row.names(species_df)[i]) == min(stringdist::stringdist(searchvectr$species, row.names(species_df)[i]))),]
if (nrow(searchvectr) > 1) { #still finds more than one with the same lower distance, keeps the first
searchvectr <- searchvectr[1,]
}
taxaInSp[i,(lastcolspecies_df + 1):(ncol(taxaInSp)-1)] <- searchvectr
taxaInSp[i,"recognizedSp"] <- searchvectr$species
} else if (nrow(searchvectr)==0){ #species not found at all
taxaInSp[i,"recognizedSp"] <- "Not found"
}
#update progressbar
setTxtProgressBar(pb, i)
}
#close progressbar
close(pb)
#END NEW SEARCH
taxaInEco <- taxaInSp
taxaIn <- species_df #dataframe to be exported for indices
taxaIncluded <- as.data.frame(rownames(taxaInEco)[which(taxaInEco$recognizedSp != "Not found")])
taxaExcluded <- as.data.frame(rownames(taxaInEco)[which(taxaInEco$recognizedSp == "Not found")])
#remove the updated species col  and move it to the back in both taxaIn
newspecies_col <- taxaIn$new_species
newspecies_col <- replace(newspecies_col, newspecies_col=="0", NA)
taxaIn<- taxaIn[ , !(names(taxaIn) == "new_species")] #removes the newspecies_col
taxaIn$new_species <- newspecies_col
newspecies_col2 <- taxaInEco$new_species
newspecies_col2 <- replace(newspecies_col2, newspecies_col2=="0", NA)
taxaInEco<- taxaInEco[ , !(names(taxaInEco) == "new_species")] #removes the newspecies_col
taxaInEco$new_species <- newspecies_col2
removeelem <- c("species") #Removes columns not samples
sampleNames <- sampleNames[!(sampleNames %in% removeelem)]
if (nrow(taxaIncluded) == 0) {
print("No taxa were recognized for morphology analysis. Check taxonomy instructions for the package")
}
#Exports included taxa in morphology analyses
colnames(taxaIncluded) <- "Eco/Morpho"
write.csv(taxaIncluded, paste(resultsPath,"\\Taxa included.csv", sep=""))
print(paste("Number of taxa recognized for morphology:", nrow(taxaIncluded), "-- Detailed list in 'Taxa included.csv'"))
#also makes a matrix for all the taxa left out, for the user to review
colnames(taxaExcluded) <- "Eco/Morpho"
write.csv(taxaExcluded, paste(resultsPath,"\\Taxa excluded.csv", sep=""))
print(paste("Number of taxa excluded for morphology:", nrow(taxaExcluded), "-- Detailed list in 'Taxa excluded.csv'" ))
#Has to clean the TaxaInEco for those species that were not found
taxaInEco <- taxaInEco[which(taxaInEco$recognizedSp != "Not found"),]
#creates a blank precision matrix for the indices
precisionmatrix <- as.data.frame(sampleNames)
names(precisionmatrix)[names(precisionmatrix)=="sampleNames"] <- "Sample"
write.csv(precisionmatrix, paste(resultsPath,"\\Precision.csv", sep=""))
#gets the column named "new_species" everything before that column should be a sample with abundance data
lastcol = which(colnames(taxaIn)=="new_species")
#
# #gets sample names
# sampleNames <- colnames(taxaIn[1:(lastcol-1)])
#CREATES A RELATIVE ABUNDANCE MATRIX AS WELL FOR THOSE INDICES THAT USE IT
#Convert taxaIn sample data to Relative Abundance data
if (isRelAb == FALSE) {
taxaInRA <- taxaIn
print("Converting species' densities to relative abundance")
rel_abu  = apply(taxaInRA[,1:(lastcol-1)], 2, function(x)
round(x / sum(x) * 100, 2))
taxaInRA = cbind(rel_abu, taxaInRA[, lastcol:ncol(taxaInRA)])
} else {
taxaInRA <- taxaIn
}
#CREATES THE EXPORT PRODUCTS
resultList <- list(as.data.frame(taxaInRA), as.data.frame(taxaIn), sampleNames, resultsPath, taxaInEco)
names(resultList) <- c("taxaInRA", "taxaIn", "sampleNames", "resultsPath", "taxaInEco")
print("Data loaded")
return(resultList)
}
allResults <- diaThorAll(diat_sampleData, resultsPath = tempdir())
View(diat_sampleData)
diat_sampleData$acronym <- NULL
allResults <- diaThorAll(diat_sampleData, resultsPath = tempdir())
#save acronyms
usethis::use_data(diat_sampleData, overwrite = T)
data("diat_sampleData")
View(diat_sampleData)
resultTest <- diat_loadData(diat_sampleData)
###### ---------- FUNCTION FOR SPEAR INDEX (Wood et al. 2019) ---------- ########
### INPUT: resultLoad Data cannot be in Relative Abuncance
### OUTPUTS: dataframe with SPEAR index per sample
diat_spear <- function(resultLoad){
# First checks if species data frames exist. If not, loads them from CSV files
if(missing(resultLoad)) {
print("Please run the diat_loadData() function first to enter your species data in the correct format")
#handles cancel button
if (missing(resultLoad)){
stop("Calculations cancelled")
}
}
taxaInRA <- resultLoad[[1]]
#Loads the species list specific for this index
#spearDB <- read.csv("../Indices/spear.csv") #uses the external csv file
spearDB <- diathor::spear
#creates a species column with the rownames to fit in the script
taxaInRA$species <- row.names(taxaInRA)
#remove the "-"
for (i in 1:nrow(spearDB)){
if (spearDB$spear_v[i]=="-"){
spearDB$spear_v[i] <- ""
}
}
#exact matches species in input data to acronym from index
# taxaInRA$spear_v <- as.integer(spearDB$spear_v[match(taxaInRA$acronym, trimws(spearDB$acronym))])
#the ones still not found (NA), try against fullspecies
taxaInRA$spear_v <- NA
for (i in 1:nrow(taxaInRA)) {
if (is.na(taxaInRA$spear_v[i])){
taxaInRA$spear_v[i] <- spearDB$spear_v[match(trimws(rownames(taxaInRA[i,])), trimws(spearDB$fullspecies))]
}
}
#removes NA from taxaInRA
# taxaInRA[is.na(taxaInRA)] <- 0
#gets the column named "new_species", everything before that is a sample
lastcol <- which(colnames(taxaInRA)=="new_species")
#######--------SPEAR INDEX START --------#############
print("Calculating SPEAR index")
#creates results dataframe
spear.results <- data.frame(matrix(ncol = 2, nrow = (lastcol-1)))
colnames(spear.results) <- c("SPEAR", "Precision")
#finds the column
spear_v <- (taxaInRA[,"spear_v"])
#PROGRESS BAR
pb <- txtProgressBar(min = 1, max = (lastcol-1), style = 3)
for (sampleNumber in 1:(lastcol-1)){ #for each sample in the matrix
#how many taxa will be used to calculate?
SPEARtaxaused <- (length(which(!is.na(spear_v))) * 100 / length(spear_v))
SPEAR <- sum((log10(as.double(taxaInRA[,sampleNumber])+1)*as.double(spear_v)), na.rm = TRUE)/sum(log10(as.double(taxaInRA[,sampleNumber])+1), na.rm = TRUE) #raw value
SPEAR <- SPEAR * 100
spear.results[sampleNumber, ] <- c(SPEAR, SPEARtaxaused)
#update progressbar
setTxtProgressBar(pb, sampleNumber)
}
#close progressbar
close(pb)
#######--------SPEAR INDEX: END--------############
#PRECISION
resultsPath <- resultLoad[[4]]
precisionmatrix <- read.csv(paste(resultsPath,"\\Precision.csv", sep=""))
precisionmatrix <- cbind(precisionmatrix, spear.results$Precision)
precisionmatrix <- precisionmatrix[-(1:which(colnames(precisionmatrix)=="Sample")-1)]
names(precisionmatrix)[names(precisionmatrix)=="spear.results$Precision"] <- "SPEAR"
write.csv(precisionmatrix, paste(resultsPath,"\\Precision.csv", sep=""))
#END PRECISION
#TAXA INCLUSION
#taxa with acronyms
taxaIncluded <- taxaInRA$species[which(!is.na(taxaInRA$spear_v))]
inclusionmatrix <- read.csv(paste(resultsPath,"\\Taxa included.csv", sep=""))
colnamesInclusionMatrix <- c(colnames(inclusionmatrix), "SPEAR")
#creates a new data matrix to append the existing Taxa Included file
newinclusionmatrix <- as.data.frame(matrix(nrow=max(length(taxaIncluded), nrow(inclusionmatrix)), ncol=ncol(inclusionmatrix)+1))
for (i in 1:ncol(inclusionmatrix)){
newinclusionmatrix[1:nrow(inclusionmatrix),i] <- as.character(inclusionmatrix[1:nrow(inclusionmatrix),i])
}
if (nrow(newinclusionmatrix) > length(taxaIncluded)){
newinclusionmatrix[1:length(taxaIncluded), ncol(newinclusionmatrix)] <- taxaIncluded
} else {
newinclusionmatrix[1:nrow(newinclusionmatrix), ncol(newinclusionmatrix)] <- taxaIncluded
}
inclusionmatrix <- newinclusionmatrix
colnames(inclusionmatrix) <- colnamesInclusionMatrix
inclusionmatrix <- inclusionmatrix[-(1:which(colnames(inclusionmatrix)=="Eco.Morpho")-1)]
write.csv(inclusionmatrix, paste(resultsPath,"\\Taxa included.csv", sep=""))
#END TAXA INCLUSION
#EXCLUDED TAXA
taxaExcluded <- taxaInRA[!('%in%'(taxaInRA$species,taxaIncluded)),"species"]
exclusionmatrix <- read.csv(paste(resultsPath,"\\Taxa excluded.csv", sep=""))
#creates a new data matrix to append the existing Taxa Included file
newexclusionmatrix <- as.data.frame(matrix(nrow=max(length(taxaExcluded), nrow(exclusionmatrix)), ncol=ncol(exclusionmatrix)+1))
for (i in 1:ncol(exclusionmatrix)){
newexclusionmatrix[1:nrow(exclusionmatrix),i] <- as.character(exclusionmatrix[1:nrow(exclusionmatrix),i])
}
if (nrow(newexclusionmatrix) > length(taxaExcluded)){
newexclusionmatrix[1:length(taxaExcluded), ncol(newexclusionmatrix)] <- taxaExcluded
} else {
newexclusionmatrix[1:nrow(newexclusionmatrix), ncol(newexclusionmatrix)] <- taxaExcluded
}
exclusionmatrix <- newexclusionmatrix
colnames(exclusionmatrix) <- colnamesInclusionMatrix
exclusionmatrix <- exclusionmatrix[-(1:which(colnames(exclusionmatrix)=="Eco.Morpho")-1)]
write.csv(exclusionmatrix, paste(resultsPath,"\\Taxa excluded.csv", sep=""))
#END EXCLUDED TAXA
rownames(spear.results) <- resultLoad[[3]]
return(spear.results)
}
diat_spear(resultTest)
resultLoad <- resultTest
taxaInRA <- resultLoad[[1]]
#open acronym CSV
spearDB <- read.csv(paste("D://Users//Juaco//Google Drive//R Scripts//Paquetes propios//DiaThor//Indices//", "spear.csv", sep =""))
spearDB$acronym <- NULL
#creates a species column with the rownames to fit in the script
taxaInRA$species <- row.names(taxaInRA)
#remove the "-"
for (i in 1:nrow(spearDB)){
if (spearDB$spear_v[i]=="-"){
spearDB$spear_v[i] <- ""
}
}
#the ones still not found (NA), try against fullspecies
taxaInRA$spear_v <- NA
for (i in 1:nrow(taxaInRA)) {
if (is.na(taxaInRA$spear_v[i])){
taxaInRA$spear_v[i] <- spearDB$spear_v[match(trimws(rownames(taxaInRA[i,])), trimws(spearDB$fullspecies))]
}
}
#gets the column named "new_species", everything before that is a sample
lastcol <- which(colnames(taxaInRA)=="new_species")
#######--------SPEAR INDEX START --------#############
print("Calculating SPEAR index")
#creates results dataframe
spear.results <- data.frame(matrix(ncol = 2, nrow = (lastcol-1)))
colnames(taxaInRA)
View(taxaInRA)
#gets the column named "new_species", everything before that is a sample
lastcol <- which(colnames(taxaInRA)=="new_species") -1
#######--------SPEAR INDEX START --------#############
print("Calculating SPEAR index")
#creates results dataframe
spear.results <- data.frame(matrix(ncol = 2, nrow = (lastcol-1)))
#gets the column named "new_species", everything before that is a sample
lastcol <- which(colnames(taxaInRA)=="new_species") -1
lastcol
#gets the column named "species", everything before that is a sample
lastcol <- which(colnames(taxaInRA)=="species") -1
#######--------SPEAR INDEX START --------#############
print("Calculating SPEAR index")
#creates results dataframe
spear.results <- data.frame(matrix(ncol = 2, nrow = (lastcol-1)))
colnames(spear.results) <- c("SPEAR", "Precision")
#finds the column
spear_v <- (taxaInRA[,"spear_v"])
#PROGRESS BAR
pb <- txtProgressBar(min = 1, max = (lastcol-1), style = 3)
for (sampleNumber in 1:(lastcol-1)){ #for each sample in the matrix
#how many taxa will be used to calculate?
SPEARtaxaused <- (length(which(!is.na(spear_v))) * 100 / length(spear_v))
SPEAR <- sum((log10(as.double(taxaInRA[,sampleNumber])+1)*as.double(spear_v)), na.rm = TRUE)/sum(log10(as.double(taxaInRA[,sampleNumber])+1), na.rm = TRUE) #raw value
SPEAR <- SPEAR * 100
spear.results[sampleNumber, ] <- c(SPEAR, SPEARtaxaused)
#update progressbar
setTxtProgressBar(pb, sampleNumber)
}
#close progressbar
close(pb)
#######--------SPEAR INDEX: END--------############
#PRECISION
resultsPath <- resultLoad[[4]]
precisionmatrix <- read.csv(paste(resultsPath,"\\Precision.csv", sep=""))
precisionmatrix <- cbind(precisionmatrix, spear.results$Precision)
precisionmatrix <- precisionmatrix[-(1:which(colnames(precisionmatrix)=="Sample")-1)]
names(precisionmatrix)[names(precisionmatrix)=="spear.results$Precision"] <- "SPEAR"
write.csv(precisionmatrix, paste(resultsPath,"\\Precision.csv", sep=""))
#TAXA INCLUSION
#taxa with acronyms
taxaIncluded <- taxaInRA$species[which(!is.na(taxaInRA$spear_v))]
inclusionmatrix <- read.csv(paste(resultsPath,"\\Taxa included.csv", sep=""))
colnamesInclusionMatrix <- c(colnames(inclusionmatrix), "SPEAR")
#creates a new data matrix to append the existing Taxa Included file
newinclusionmatrix <- as.data.frame(matrix(nrow=max(length(taxaIncluded), nrow(inclusionmatrix)), ncol=ncol(inclusionmatrix)+1))
for (i in 1:ncol(inclusionmatrix)){
newinclusionmatrix[1:nrow(inclusionmatrix),i] <- as.character(inclusionmatrix[1:nrow(inclusionmatrix),i])
}
if (nrow(newinclusionmatrix) > length(taxaIncluded)){
newinclusionmatrix[1:length(taxaIncluded), ncol(newinclusionmatrix)] <- taxaIncluded
} else {
newinclusionmatrix[1:nrow(newinclusionmatrix), ncol(newinclusionmatrix)] <- taxaIncluded
}
inclusionmatrix <- newinclusionmatrix
colnames(inclusionmatrix) <- colnamesInclusionMatrix
inclusionmatrix <- inclusionmatrix[-(1:which(colnames(inclusionmatrix)=="Eco.Morpho")-1)]
write.csv(inclusionmatrix, paste(resultsPath,"\\Taxa included.csv", sep=""))
#END TAXA INCLUSION
#EXCLUDED TAXA
taxaExcluded <- taxaInRA[!('%in%'(taxaInRA$species,taxaIncluded)),"species"]
exclusionmatrix <- read.csv(paste(resultsPath,"\\Taxa excluded.csv", sep=""))
#creates a new data matrix to append the existing Taxa Included file
newexclusionmatrix <- as.data.frame(matrix(nrow=max(length(taxaExcluded), nrow(exclusionmatrix)), ncol=ncol(exclusionmatrix)+1))
for (i in 1:ncol(exclusionmatrix)){
newexclusionmatrix[1:nrow(exclusionmatrix),i] <- as.character(exclusionmatrix[1:nrow(exclusionmatrix),i])
}
if (nrow(newexclusionmatrix) > length(taxaExcluded)){
newexclusionmatrix[1:length(taxaExcluded), ncol(newexclusionmatrix)] <- taxaExcluded
} else {
newexclusionmatrix[1:nrow(newexclusionmatrix), ncol(newexclusionmatrix)] <- taxaExcluded
}
exclusionmatrix <- newexclusionmatrix
colnames(exclusionmatrix) <- colnamesInclusionMatrix
exclusionmatrix <- exclusionmatrix[-(1:which(colnames(exclusionmatrix)=="Eco.Morpho")-1)]
write.csv(exclusionmatrix, paste(resultsPath,"\\Taxa excluded.csv", sep=""))
rownames(spear.results) <- resultLoad[[3]]
return(spear.results)
spear.results
library(diathor)
resTest <- diaThorAll()
Encoding(levels(english_monarchs$name)) <- "latin1"
epid <- read.csv(paste("D://Users//Juaco//Google Drive//R Scripts//Paquetes propios//DiaThor//Indices//", "epid.csv", sep =""))
epid$acronym
epid$acronym <- NULL
epid$fullspecies
Encoding(levels(epid$fullspecies)) <- "latin1"
Encoding((epid$fullspecies)) <- "latin1"
Encoding(epid$fullspecies) <- "latin1"
epid$fullspecies
usethis::use_data(epid, overwrite = T)
epid
epid <- read.csv(paste("D://Users//Juaco//Google Drive//R Scripts//Paquetes propios//DiaThor//Indices//", "epid.csv", sep =""))
epid$acronym <- NULL
epid$fullspecies
Encoding(epid$fullspecies) <- "latin1"
epid$fullspecies <- iconv(epid$fullspecies, from = "latin1", to = "UTF-8")
usethis::use_data(epid, overwrite = T)
Encoding(epid$fullspecies)
Encoding(epid$fullspecies) <- "latin1"
Encoding(epid$fullspecies)
epid$fullspecies
epid <- read.csv(paste("D://Users//Juaco//Google Drive//R Scripts//Paquetes propios//DiaThor//Indices//", "epid.csv", sep =""))
epid$acronym <- NULL
usethis::use_data(epid, overwrite = T)
Encoding(epid$fullspecies)
Encoding(epid$fullspecies) <- "latin1"
epid$fullspecies <- iconv(epid$fullspecies, from = "latin1", to = "UTF-8")
Encoding(epid$fullspecies)
iconv(epid$fullspecies, from = "latin1", to = "UTF-8")
Encoding(epid$fullspecies)
usethis::use_data(epid, overwrite = T)
epid <- read.csv(paste("D://Users//Juaco//Google Drive//R Scripts//Paquetes propios//DiaThor//Indices//", "epid.csv", sep =""))
epid$acronym <- NULL
usethis::use_data(epid, overwrite = T)
Encoding(epid$fullspecies)
Encoding(epid$fullspecies) <- "latin1"
Encoding(epid$fullspecies)
epid <- read.csv(paste("D://Users//Juaco//Google Drive//R Scripts//Paquetes propios//DiaThor//Indices//", "epid.csv", sep =""))
epid$acronym <- NULL
Encoding(epid$fullspecies)
Encoding(epid$fullspecies) <- "latin1"
Encoding(epid$fullspecies)
Encoding(epid$fullspecies) <- "latin2"
usethis::use_data(epid, overwrite = T)
load("D:/Users/Juaco/Google Drive/R Scripts/Paquetes propios/DiaThor/DiaThor - Git+CRAN/DiaThor - PostOmnidia/data/epid.rda")
View(epid)
epid <- read.csv(paste("D://Users//Juaco//Google Drive//R Scripts//Paquetes propios//DiaThor//Indices//", "epid.csv", sep =""))
epid$acronym <- NULL
Encoding(epid$fullspecies) <- "latin2"
epid$fullspecies <- iconv(epid$fullspecies, from = "latin2", to = "UTF-8")
Encoding(epid$species) <- "latin2"
epid$fullspecies <- iconv(epid$species, from = "latin2", to = "UTF-8")
usethis::use_data(epid, overwrite = T)
epid <- read.csv(paste("D://Users//Juaco//Google Drive//R Scripts//Paquetes propios//DiaThor//Indices//", "epid.csv", sep =""))
epid$acronym <- NULL
Encoding(epid$species) <- "latin2"
Encoding(epid$fullspecies) <- "latin2"
epid$fullspecies <- iconv(epid$fullspecies, from = "latin2", to = "ASCII")
epid$fullspecies
epid$species <- iconv(epid$species, from = "latin2", to = "ASCII")
Encoding(epid$species)
usethis::use_data(epid, overwrite = T)
View(epid)
epid <- read.csv(paste("D://Users//Juaco//Google Drive//R Scripts//Paquetes propios//DiaThor//Indices//", "epid.csv", sep =""))
epid$acronym <- NULL
Encoding(epid$species) <- "latin2"
Encoding(epid$fullspecies) <- "latin2"
epid$fullspecies <- iconv(epid$fullspecies, from = "latin2", to = "ASCII")
epid$species <- iconv(epid$species, from = "latin2", to = "ASCII")
usethis::use_data(epid, overwrite = T)
idch <- read.csv(paste("D://Users//Juaco//Google Drive//R Scripts//Paquetes propios//DiaThor//Indices//", "idch.csv", sep =""))
idch$acronym <- NULL
Encoding(idch$species) <- "latin2"
View(idch)
Encoding(idch$fullspecies) <- "latin2"
idch$fullspecies <- iconv(idch$fullspecies, from = "latin2", to = "ASCII")
ips <- read.csv(paste("D://Users//Juaco//Google Drive//R Scripts//Paquetes propios//DiaThor//Indices//", "ips.csv", sep =""))
ips$acronym <- NULL
View(ips)
Encoding(ips$fullspecies) <- "latin2"
ips$fullspecies <- iconv(ips$fullspecies, from = "latin2", to = "ASCII")
tdi <- read.csv(paste("D://Users//Juaco//Google Drive//R Scripts//Paquetes propios//DiaThor//Indices//", "tdi.csv", sep =""))
tdi$acronym <- NULL
Encoding(tdi$fullspecies) <- "latin2"
tdi$fullspecies <- iconv(tdi$fullspecies, from = "latin2", to = "ASCII")
usethis::use_data(tdi, overwrite = T)
ips <- read.csv(paste("D://Users//Juaco//Google Drive//R Scripts//Paquetes propios//DiaThor//Indices//", "ips.csv", sep =""))
ips$acronym <- NULL
Encoding(ips$fullspecies) <- "latin2"
ips$fullspecies <- iconv(ips$fullspecies, from = "latin2", to = "ASCII")
usethis::use_data(ips, overwrite = T)
idch <- read.csv(paste("D://Users//Juaco//Google Drive//R Scripts//Paquetes propios//DiaThor//Indices//", "idch.csv", sep =""))
idch$acronym <- NULL
Encoding(idch$fullspecies) <- "latin2"
idch$fullspecies <- iconv(idch$fullspecies, from = "latin2", to = "ASCII")
usethis::use_data(idch, overwrite = T)
library(diathor)
diaThorAll()
diaThorAll()
load("D:/Users/Juaco/Google Drive/R Scripts/Paquetes propios/DiaThor/DiaThor - Git+CRAN/DiaThor - PostOmnidia/data/epid.rda")
View(epid)
load("D:/Users/Juaco/Google Drive/R Scripts/Paquetes propios/DiaThor/DiaThor - Git+CRAN/DiaThor - PostOmnidia/data/dbc_offline.rda")
View(dbc_offline)
dbc_offline$vdams
dbc_offline$vdams > 0
count(dbc_offline$vdams > 0)
sum(dbc_offline$vdams > 0)
which(dbc_offline$vdams > 0)
load("D:/Users/Juaco/Google Drive/R Scripts/Paquetes propios/DiaThor/DiaThor - Git+CRAN/DiaThor - PostOmnidia/data/tdi.rda")
View(tdi)
