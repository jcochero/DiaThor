HS2 = unlist(taxaIn[which(cemfgs_rb == "HS2"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
HS3 = unlist(taxaIn[which(cemfgs_rb == "HS3"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
HS4 = unlist(taxaIn[which(cemfgs_rb == "HS4"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
HS5 = unlist(taxaIn[which(cemfgs_rb == "HS5"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
LS1 = unlist(taxaIn[which(cemfgs_rb == "LS1"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
LS2 = unlist(taxaIn[which(cemfgs_rb == "LS2"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
LS3 = unlist(taxaIn[which(cemfgs_rb == "LS3"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
LS4 = unlist(taxaIn[which(cemfgs_rb == "LS4"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
LS5 = unlist(taxaIn[which(cemfgs_rb == "LS5"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
MS1 = unlist(taxaIn[which(cemfgs_rb == "MS1"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
MS2 = unlist(taxaIn[which(cemfgs_rb == "MS2"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
MS3 = unlist(taxaIn[which(cemfgs_rb == "MS3"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
MS4 = unlist(taxaIn[which(cemfgs_rb == "MS4"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
MS5 = unlist(taxaIn[which(cemfgs_rb == "MS5"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
PS1 = unlist(taxaIn[which(cemfgs_rb == "PS1"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
PS2 = unlist(taxaIn[which(cemfgs_rb == "PS2"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
PS3 = unlist(taxaIn[which(cemfgs_rb == "PS3"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
PS4 = unlist(taxaIn[which(cemfgs_rb == "PS4"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
PS5 = unlist(taxaIn[which(cemfgs_rb == "PS5"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)])
)
#replace NAs for 0
cemfgs_rb.results[is.na(cemfgs_rb.results)] = 0
cemfgs_rb.results[, `CEMFGS_RB_Indet` := round(100 - ( HS1 + HS2 + HS3 + HS4 + HS5 + LS1 + LS2 + LS3 + LS4 + LS5 + MS1 + MS2 + MS3 + MS4 + MS5 + PS1 + PS2 + PS3 + PS4 + PS5), 1)]
#taxa used for each guild
cemfgs_rb_binary <- as.numeric(!is.na(taxaIn$cemfgs_rb))
for (sampleNumber in 1:(lastcol - 1)) {
CEMFGS_RGtaxaused <- length(which(cemfgs_rb_binary * taxaIn[,..sampleNumber] > 0))*100 / length(cemfgs_rb_binary)
#The .. before sampleNumber are the new way to reference the variable in the data.table package
cemfgs_rb.results$CEMFGS_RB_Taxa_used [sampleNumber] <- CEMFGS_RGtaxaused
}
cemfgs_rb.results2 <- matrix(unlist(cemfgs_rb.results), ncol = lastcol - 1, byrow = TRUE) %>% as.data.frame()
cemfgs_rb.results2 <- t(cemfgs_rb.results2)
rownames(cemfgs_rb.results2) <- resultLoad[[3]]
colnames(cemfgs_rb.results2) <- c("HS1" , "HS2" , "HS3" , "HS4" , "HS5" , "LS1" , "LS2" , "LS3" , "LS4" , "LS5" , "MS1" , "MS2" , "MS3" , "MS4" , "MS5" , "PS1" , "PS2" , "PS3" , "PS4" , "PS5" , "CEMFGS class Indet" , "CEMFGS Taxa used")
cemfgs_rb.results <- as.data.frame(cemfgs_rb.results2) #need to convert it to dataframe explicitly to plot
return(cemfgs_rb.results)
}
#TEST
#Load the data
species_df <- as.data.frame(read.csv("D:/Users/Juaco/Google Drive/R Scripts/Paquetes propios/DiaThor/DiaThor - Sin Omnidia - Datos prueba/Input.csv"))
cresultsPath <- "D:/Users/Juaco/Google Drive/R Scripts/Paquetes propios/DiaThor/DiaThor - Sin Omnidia - Datos prueba/Out"
resultLoad <- diat_loadData(species_df, resultsPath = cresultsPath )
cemfgs_rb.results <- diat_cemfgs_rb
library(diathor)
#TEST
#Load the data
species_df <- as.data.frame(read.csv("D:/Users/Juaco/Google Drive/R Scripts/Paquetes propios/DiaThor/DiaThor - Sin Omnidia - Datos prueba/Input.csv"))
cresultsPath <- "D:/Users/Juaco/Google Drive/R Scripts/Paquetes propios/DiaThor/DiaThor - Sin Omnidia - Datos prueba/Out"
#Test the entire package
#Rebuild
diaThorAll(species_df, resultsPath = cresultsPath)
#TEST
#Load the data
species_df <- as.data.frame(read.csv("D:/Users/Juaco/Google Drive/R Scripts/Paquetes propios/DiaThor/DiaThor - Sin Omnidia - Datos prueba/Input.csv"))
cresultsPath <- "D:/Users/Juaco/Google Drive/R Scripts/Paquetes propios/DiaThor/DiaThor - Sin Omnidia - Datos prueba/Out"
resultLoad <- diat_loadData(species_df, resultsPath = cresultsPath )
taxaIn <- resultLoad[[1]] #1 = Relative abundance, 2=abundance
### START NEW CORRECTIONS
#Loads the species list specific for this index
cemfgs_rbDB <- diathor::cemfgs_rb
#creates a species column with the rownames to fit in the script
taxaIn$species <- row.names(taxaIn)
# try finding fullspecies
taxaIn$cemfgs_rb <- NA
for (i in 1:nrow(taxaIn)) {
if (is.na(taxaIn$cemfgs_rb[i])){
taxaIn$cemfgs_rb[i] <- cemfgs_rbDB$cemfgs_rb[match(trimws(rownames(taxaIn[i,])), trimws(cemfgs_rbDB$fullspecies))]
}
}
#gets the column named "new_species", everything before that is a sample
lastcol <- which(colnames(taxaIn)=="new_species")
#######--------CEMFGS_RG INDEX START --------#############
print("Calculating CEMFGS_RG")
#creates results dataframe
cemfgs_rb.results <- data.frame(matrix(ncol = 2, nrow = (lastcol-1)))
colnames(cemfgs_rb.results) <- c("CEMFGS_RG", "Precision")
#finds the column
cemfgs_rb <- (taxaIn[,"cemfgs_rb"])
#PROGRESS BAR
# pb <- txtProgressBar(min = 1, max = (lastcol-1), style = 3)
HS1 <- HS2 <- HS3 <- HS4 <- HS5 <- NULL
LS1 <- LS2 <- LS3 <- LS4 <- LS5 <- NULL
MS1 <- MS2 <- MS3 <- MS4 <- MS5 <- NULL
PS1 <- PS2 <- PS3 <- PS4 <- PS5 <- NULL
CEMFGS_class_Indet <- CEMFGS_Taxa_used <- NULL
data.table::setDT(taxaIn)
cemfgs_rb.results = data.table(
HS1 = unlist(taxaIn[which(cemfgs_rb == "HS1"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
HS2 = unlist(taxaIn[which(cemfgs_rb == "HS2"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
HS3 = unlist(taxaIn[which(cemfgs_rb == "HS3"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
HS4 = unlist(taxaIn[which(cemfgs_rb == "HS4"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
HS5 = unlist(taxaIn[which(cemfgs_rb == "HS5"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
LS1 = unlist(taxaIn[which(cemfgs_rb == "LS1"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
LS2 = unlist(taxaIn[which(cemfgs_rb == "LS2"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
LS3 = unlist(taxaIn[which(cemfgs_rb == "LS3"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
LS4 = unlist(taxaIn[which(cemfgs_rb == "LS4"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
LS5 = unlist(taxaIn[which(cemfgs_rb == "LS5"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
MS1 = unlist(taxaIn[which(cemfgs_rb == "MS1"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
MS2 = unlist(taxaIn[which(cemfgs_rb == "MS2"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
MS3 = unlist(taxaIn[which(cemfgs_rb == "MS3"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
MS4 = unlist(taxaIn[which(cemfgs_rb == "MS4"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
MS5 = unlist(taxaIn[which(cemfgs_rb == "MS5"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
PS1 = unlist(taxaIn[which(cemfgs_rb == "PS1"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
PS2 = unlist(taxaIn[which(cemfgs_rb == "PS2"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
PS3 = unlist(taxaIn[which(cemfgs_rb == "PS3"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
PS4 = unlist(taxaIn[which(cemfgs_rb == "PS4"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
PS5 = unlist(taxaIn[which(cemfgs_rb == "PS5"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)])
)
#replace NAs for 0
cemfgs_rb.results[is.na(cemfgs_rb.results)] = 0
cemfgs_rb.results[, `CEMFGS_RB_Indet` := round(100 - ( HS1 + HS2 + HS3 + HS4 + HS5 + LS1 + LS2 + LS3 + LS4 + LS5 + MS1 + MS2 + MS3 + MS4 + MS5 + PS1 + PS2 + PS3 + PS4 + PS5), 1)]
#taxa used for each guild
cemfgs_rb_binary <- as.numeric(!is.na(taxaIn$cemfgs_rb))
unlist(taxaIn[which(cemfgs_rb == "HS1"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)])
suppressWarnings(unlist(taxaIn[which(cemfgs_rb == "HS1"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]))
unlist(taxaIn[which(cemfgs_rb == "HS2"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)])
unlist(taxaIn[which(cemfgs_rb == "HS3"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)])
unlist(taxaIn[which(cemfgs_rb == "LS1"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)])
unlist(taxaIn[which(cemfgs_rb == "LS2"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)])
cemfgs_rb.results <- suppressWarnings(data.table(
HS1 = unlist(taxaIn[which(cemfgs_rb == "HS1"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
HS2 = unlist(taxaIn[which(cemfgs_rb == "HS2"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
HS3 = unlist(taxaIn[which(cemfgs_rb == "HS3"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
HS4 = unlist(taxaIn[which(cemfgs_rb == "HS4"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
HS5 = unlist(taxaIn[which(cemfgs_rb == "HS5"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
LS1 = unlist(taxaIn[which(cemfgs_rb == "LS1"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
LS2 = unlist(taxaIn[which(cemfgs_rb == "LS2"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
LS3 = unlist(taxaIn[which(cemfgs_rb == "LS3"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
LS4 = unlist(taxaIn[which(cemfgs_rb == "LS4"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
LS5 = unlist(taxaIn[which(cemfgs_rb == "LS5"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
MS1 = unlist(taxaIn[which(cemfgs_rb == "MS1"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
MS2 = unlist(taxaIn[which(cemfgs_rb == "MS2"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
MS3 = unlist(taxaIn[which(cemfgs_rb == "MS3"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
MS4 = unlist(taxaIn[which(cemfgs_rb == "MS4"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
MS5 = unlist(taxaIn[which(cemfgs_rb == "MS5"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
PS1 = unlist(taxaIn[which(cemfgs_rb == "PS1"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
PS2 = unlist(taxaIn[which(cemfgs_rb == "PS2"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
PS3 = unlist(taxaIn[which(cemfgs_rb == "PS3"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
PS4 = unlist(taxaIn[which(cemfgs_rb == "PS4"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
PS5 = unlist(taxaIn[which(cemfgs_rb == "PS5"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)])
))
cemfgs_rb.results <- suppressWarnings(data.table(
HS1 = unlist(taxaIn[which(cemfgs_rb == "HS1"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
HS2 = unlist(taxaIn[which(cemfgs_rb == "HS2"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
HS3 = unlist(taxaIn[which(cemfgs_rb == "HS3"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
HS4 = unlist(taxaIn[which(cemfgs_rb == "HS4"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
HS5 = unlist(taxaIn[which(cemfgs_rb == "HS5"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
LS1 = unlist(taxaIn[which(cemfgs_rb == "LS1"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
LS2 = unlist(taxaIn[which(cemfgs_rb == "LS2"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
LS3 = unlist(taxaIn[which(cemfgs_rb == "LS3"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
LS4 = unlist(taxaIn[which(cemfgs_rb == "LS4"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
LS5 = unlist(taxaIn[which(cemfgs_rb == "LS5"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
MS1 = unlist(taxaIn[which(cemfgs_rb == "MS1"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
MS2 = unlist(taxaIn[which(cemfgs_rb == "MS2"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
MS3 = unlist(taxaIn[which(cemfgs_rb == "MS3"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
MS4 = unlist(taxaIn[which(cemfgs_rb == "MS4"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
MS5 = unlist(taxaIn[which(cemfgs_rb == "MS5"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
PS1 = unlist(taxaIn[which(cemfgs_rb == "PS1"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
PS2 = unlist(taxaIn[which(cemfgs_rb == "PS2"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
PS3 = unlist(taxaIn[which(cemfgs_rb == "PS3"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
PS4 = unlist(taxaIn[which(cemfgs_rb == "PS4"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)]),
PS5 = unlist(taxaIn[which(cemfgs_rb == "PS5"), lapply(.SD, sum, na.rm = TRUE), .SDcols = 1:(lastcol -
1)])
))
#replace NAs for 0
cemfgs_rb.results[is.na(cemfgs_rb.results)] = 0
cemfgs_rb.results[, `CEMFGS_RB_Indet` := round(100 - ( HS1 + HS2 + HS3 + HS4 + HS5 + LS1 + LS2 + LS3 + LS4 + LS5 + MS1 + MS2 + MS3 + MS4 + MS5 + PS1 + PS2 + PS3 + PS4 + PS5), 1)]
#taxa used for each guild
cemfgs_rb_binary <- as.numeric(!is.na(taxaIn$cemfgs_rb))
for (sampleNumber in 1:(lastcol - 1)) {
CEMFGS_RGtaxaused <- length(which(cemfgs_rb_binary * taxaIn[,..sampleNumber] > 0))*100 / length(cemfgs_rb_binary)
#The .. before sampleNumber are the new way to reference the variable in the data.table package
cemfgs_rb.results$CEMFGS_RB_Taxa_used [sampleNumber] <- CEMFGS_RGtaxaused
}
cemfgs_rb.results2 <- matrix(unlist(cemfgs_rb.results), ncol = lastcol - 1, byrow = TRUE) %>% as.data.frame()
cemfgs_rb.results2 <- t(cemfgs_rb.results2)
rownames(cemfgs_rb.results2) <- resultLoad[[3]]
colnames(cemfgs_rb.results2) <- c("HS1" , "HS2" , "HS3" , "HS4" , "HS5" , "LS1" , "LS2" , "LS3" , "LS4" , "LS5" , "MS1" , "MS2" , "MS3" , "MS4" , "MS5" , "PS1" , "PS2" , "PS3" , "PS4" , "PS5" , "CEMFGS class Indet" , "CEMFGS Taxa used")
cemfgs_rb.results <- as.data.frame(cemfgs_rb.results2) #need to convert it to dataframe explicitly to plot
taxaIn$cemfgs_rb
taxaIn$species[which(!is.na(taxaIn$cemfgs_rb))]
#TAXA INCLUSION
#taxa with acronyms
taxaIncluded <- taxaIn$species[which(!is.na(taxaIn$cemfgs_rb))]
inclusionmatrix <- read.csv(file.path(resultsPath, "Taxa included.csv"))
resultsPath <- "D:/Users/Juaco/Google Drive/R Scripts/Paquetes propios/DiaThor/DiaThor - Sin Omnidia - Datos prueba/Out"
inclusionmatrix <- read.csv(file.path(resultsPath, "Taxa included.csv"))
colnamesInclusionMatrix <- c(colnames(inclusionmatrix), "CEMFGS_RB")
#creates a new data matrix to append the existing Taxa Included file
newinclusionmatrix <- as.data.frame(matrix(nrow=max(length(taxaIncluded), nrow(inclusionmatrix)), ncol=ncol(inclusionmatrix)+1))
for (i in 1:ncol(inclusionmatrix)){
newinclusionmatrix[1:nrow(inclusionmatrix),i] <- as.character(inclusionmatrix[1:nrow(inclusionmatrix),i])
}
if (nrow(newinclusionmatrix) > length(taxaIncluded)){
newinclusionmatrix[1:length(taxaIncluded), ncol(newinclusionmatrix)] <- taxaIncluded
} else {
newinclusionmatrix[1:nrow(newinclusionmatrix), ncol(newinclusionmatrix)] <- taxaIncluded
}
inclusionmatrix <- newinclusionmatrix
colnames(inclusionmatrix) <- colnamesInclusionMatrix
inclusionmatrix <- inclusionmatrix[-(1:which(colnames(inclusionmatrix)=="Eco.Morpho")-1)]
write.csv(inclusionmatrix, file.path(resultsPath,"Taxa included.csv"))
#EXCLUDED TAXA
taxaExcluded <- taxaIn[!('%in%'(taxaIn$species,taxaIncluded)),"species"]
exclusionmatrix <- read.csv(file.path(resultsPath, "Taxa excluded.csv"))
#creates a new data matrix to append the existing Taxa Included file
newexclusionmatrix <- as.data.frame(matrix(nrow=max(length(taxaExcluded), nrow(exclusionmatrix)), ncol=ncol(exclusionmatrix)+1))
for (i in 1:ncol(exclusionmatrix)){
newexclusionmatrix[1:nrow(exclusionmatrix),i] <- as.character(exclusionmatrix[1:nrow(exclusionmatrix),i])
}
if (nrow(newexclusionmatrix) > length(taxaExcluded)){
newexclusionmatrix[1:length(taxaExcluded), ncol(newexclusionmatrix)] <- taxaExcluded
} else {
newexclusionmatrix[1:nrow(newexclusionmatrix), ncol(newexclusionmatrix)] <- taxaExcluded
}
length(taxaExcluded)
nrow(newexclusionmatrix)
taxaExcluded
newexclusionmatrix[1:length(taxaExcluded), ncol(newexclusionmatrix)]
newexclusionmatrix[1:nrow(newexclusionmatrix), ncol(newexclusionmatrix)]
if (nrow(newexclusionmatrix) > length(taxaExcluded)){
newexclusionmatrix[1:length(taxaExcluded), ncol(newexclusionmatrix)] <- taxaExcluded
} else {
newexclusionmatrix[1:nrow(newexclusionmatrix), ncol(newexclusionmatrix)] <- taxaExcluded
}
nrow(newexclusionmatrix)
taxaExcluded
length(taxaExcluded)
class(taxaExcluded)
class(as.data.frame(taxaExcluded))
as.data.frame(taxaIn[!('%in%'(taxaIn$species,taxaIncluded)),"species"])
#EXCLUDED TAXA
taxaExcluded <- as.data.frame(taxaIn[!('%in%'(taxaIn$species,taxaIncluded)),"species"])
length(taxaExcluded)
#EXCLUDED TAXA
taxaExcluded <- as.data.frame(taxaIn[!('%in%'(taxaIn$species,taxaIncluded)),"species"])
length(taxaExcluded)
as.vector(taxaIn[!('%in%'(taxaIn$species,taxaIncluded)),"species"])
#EXCLUDED TAXA
taxaExcluded <- as.vector(taxaIn[!('%in%'(taxaIn$species,taxaIncluded)),"species"])
length(taxaExcluded)
taxaExcluded <- taxaIn[!('%in%'(taxaIn$species,taxaIncluded)),"species"]
View(taxaExcluded)
nrow(taxaExcluded)
if (nrow(newexclusionmatrix) > nrow(taxaExcluded)){
newexclusionmatrix[1:nrow(taxaExcluded), ncol(newexclusionmatrix)] <- taxaExcluded
} else {
newexclusionmatrix[1:nrow(newexclusionmatrix), ncol(newexclusionmatrix)] <- taxaExcluded
}
newexclusionmatrix
exclusionmatrix <- newexclusionmatrix
colnames(exclusionmatrix) <- colnamesInclusionMatrix
exclusionmatrix <- exclusionmatrix[-(1:which(colnames(exclusionmatrix)=="Eco.Morpho")-1)]
#write.csv(exclusionmatrix, paste(resultsPath,"\\Taxa excluded.csv", sep=""))
write.csv(exclusionmatrix, file.path(resultsPath,"Taxa excluded.csv"))
return(cemfgs_rb.results)
library(diathor)
#Test the entire package
#Rebuild
diaThorAll(species_df, resultsPath = cresultsPath)
detach("package:diathor", unload = TRUE)
library(optimos.prime)
library(tidyverse)
install.packages("dplyr")
library(dplyr)
detach("package:dplyr", unload = TRUE)
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
detach("package:dplyr", unload = TRUE)
library(dplyr)
library(optimos.prime)
op_calculate()
op_calculate()
op_calculate()
# 1.Librerías
library(osmdata)
library(ggplot2)
# 2. y 3. Calles principales de León, Guanajuato
street <- opq(getbb("Leon Mexico"))
# 1.Librerías
library(osmdata)
library(ggplot2)
# 2. y 3. Calles principales de León, Guanajuato
street <- opq(getbb("Leon Mexico"))
street<- add_osm_feature(street, key ="highway",
value = c("motorway", "primary",
"secondary", "tertiary"))
#4. Revisar categorías dentro de la clase "highway"
available_tags("highway")
# 5. Crear un objeto osmdata_sf
street <- osmdata_sf(street)
# 6. Calles secundarias de León, Guanajuato
small_street <- opq(getbb("Leon Mexico"))
small_street<- add_osm_feature(small_street, key ="highway",
value = c("residential", "living_street",
"unclassified", "service", "footway"))
small_street <- osmdata_sf(small_street)
#7. Gráfico mínimo
ggplot() +
geom_sf(data=street$osm_lines,
inherit.aes = FALSE,
color ="black",
size = .4,
alpha = .8) +
geom_sf(data=small_street$osm_lines,
inherit.aes = FALSE,
color ="gray30",
size = .2,
alpha = .6) +
coord_sf(xlim = c(-101.84, -101.522),
ylim = c(20.96, 21.28))+
theme_void()
#7. Gráfico mínimo
ggplot() +
geom_sf(data=street$osm_lines,
inherit.aes = FALSE,
color ="black",
size = .4,
alpha = .8) +
geom_sf(data=small_street$osm_lines,
inherit.aes = FALSE,
color ="gray30",
size = .2,
alpha = .6) +
coord_sf(xlim = c(-101.84, -101.522),
ylim = c(20.96, 21.28))+
theme_void()
#7. Gráfico mínimo
ggplot() +
geom_sf(data=street$osm_lines,
inherit.aes = FALSE,
color ="black",
size = .4,
alpha = .8) +
geom_sf(data=small_street$osm_lines,
inherit.aes = FALSE,
color ="gray30",
size = .2,
alpha = .6) +
coord_sf(xlim = c(-101.84, -101.522),
ylim = c(20.96, 21.28))+
theme_void()
# 2. y 3. Calles principales de León, Guanajuato
street <- opq(getbb("La Plata Argentina"))
street<- add_osm_feature(street, key ="highway",
value = c("motorway", "primary",
"secondary", "tertiary"))
#4. Revisar categorías dentro de la clase "highway"
available_tags("highway")
# 5. Crear un objeto osmdata_sf
street <- osmdata_sf(street)
# 6. Calles secundarias de León, Guanajuato
small_street <- opq(getbb("La Plata Argentina"))
small_street<- add_osm_feature(small_street, key ="highway",
value = c("residential", "living_street",
"unclassified", "service", "footway"))
small_street <- osmdata_sf(small_street)
#7. Gráfico mínimo
ggplot() +
geom_sf(data=street$osm_lines,
inherit.aes = FALSE,
color ="black",
size = .4,
alpha = .8) +
geom_sf(data=small_street$osm_lines,
inherit.aes = FALSE,
color ="gray30",
size = .2,
alpha = .6) +
coord_sf(xlim = c(-101.84, -101.522),
ylim = c(20.96, 21.28))+
theme_void()
View(small_street)
small_street <- osmdata_sf(small_street)
#4. Revisar categorías dentro de la clase "highway"
available_tags("highway")
# 5. Crear un objeto osmdata_sf
street <- osmdata_sf(street)
# 2. y 3. Calles principales de León, Guanajuato
street <- opq(getbb("La Plata Argentina"))
street<- add_osm_feature(street, key ="highway",
value = c("motorway", "primary",
"secondary", "tertiary"))
#4. Revisar categorías dentro de la clase "highway"
available_tags("highway")
# 5. Crear un objeto osmdata_sf
street <- osmdata_sf(street)
# 6. Calles secundarias de León, Guanajuato
small_street <- opq(getbb("La Plata Argentina"))
small_street<- add_osm_feature(small_street, key ="highway",
value = c("residential", "living_street",
"unclassified", "service", "footway"))
small_street <- osmdata_sf(small_street)
#4. Revisar categorías dentro de la clase "highway"
available_tags("highway")
#7. Gráfico mínimo
ggplot() +
geom_sf(data=street$osm_lines,
inherit.aes = FALSE,
color ="black",
size = .4,
alpha = .8) +
geom_sf(data=small_street$osm_lines,
inherit.aes = FALSE,
color ="gray30",
size = .2,
alpha = .6) +
coord_sf(xlim = c(-101.84, -101.522),
ylim = c(20.96, 21.28))+
theme_void()
ggplot
#7. Gráfico mínimo
plot <- ggplot() +
geom_sf(data=street$osm_lines,
inherit.aes = FALSE,
color ="black",
size = .4,
alpha = .8) +
geom_sf(data=small_street$osm_lines,
inherit.aes = FALSE,
color ="gray30",
size = .2,
alpha = .6) +
coord_sf(xlim = c(-101.84, -101.522),
ylim = c(20.96, 21.28))+
theme_void()
plot
