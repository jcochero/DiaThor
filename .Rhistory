result <- tidyr::gather(result) #uses tidyr to rearrange the dataframe in a single column
result$sampleCol <- sampleCol #adds another column with the sample names
colors <- c("#CC1C00", "#5C88DA", "#84BD00", "#FFCD00", "#7C878E", "#E64B35", "#4DBBD5", "#01A087", "#3C5488", "#F39B7F", "#FF410D99", "#6EE2FF99", "#F7C53099", "#95CC5E99", "#D0DFE699", "#F79D1E99", "#748AA699")
print(ggplot2::ggplot(result, aes(fill=key, y=value, x=sampleCol)) +
geom_bar(position="fill", stat="identity") +
scale_fill_manual(values=colors) +
xlab("Samples") +
ylab(title)) #graphs
percentbarchart.plot <- function(result, title){
x <- colnames(result) #checks if taxa used colum exists and removes it
x <- substr(x, nchar(x)-8, nchar(x)) == 'Taxa used' #checks if taxa used colum exists and removes it
if (tail(x, n=1)==T) {
result <- result[,-ncol(result)] #and removes it
}
sampleCol <- rep(sampleNames, ncol(result)) #gets sample names
result <- tidyr::gather(result) #uses tidyr to rearrange the dataframe in a single column
result$sampleCol <- sampleCol #adds another column with the sample names
colors <- c("#CC1C00", "#5C88DA", "#84BD00", "#FFCD00", "#7C878E", "#E64B35", "#4DBBD5", "#01A087", "#3C5488", "#F39B7F", "#FF410D99", "#6EE2FF99", "#F7C53099", "#95CC5E99", "#D0DFE699", "#F79D1E99", "#748AA699")
print(ggplot2::ggplot(result, aes(fill=key, y=value, x=sampleCol)) +
geom_bar(position="fill", stat="identity") +
scale_fill_manual(values=colors) +
xlab("Samples") +
ylab(title)) #graphs
}
percentbarchart.plot(resGuilds)
View(resGuilds)
percentbarchart.plot(resGuilds, "guilds")
percentbarchart.plot <- function(result, title){
x <- colnames(result) #checks if taxa used colum exists and removes it
x <- substr(x, nchar(x)-8, nchar(x)) == 'Taxa used' #checks if taxa used colum exists and removes it
if (tail(x, n=1)==T) {
result <- result[,-ncol(result)] #and removes it
}
sampleCol <- rep(sampleNames, ncol(result)) #gets sample names
result <- tidyr::gather(result) #uses tidyr to rearrange the dataframe in a single column
result$sampleCol <- sampleCol #adds another column with the sample names
colors <- c("#CC1C00", "#5C88DA", "#84BD00", "#FFCD00", "#7C878E", "#E64B35", "#4DBBD5", "#01A087", "#3C5488", "#F39B7F", "#FF410D99", "#6EE2FF99", "#F7C53099", "#95CC5E99", "#D0DFE699", "#F79D1E99", "#748AA699")
print(ggplot2::ggplot(result, aes(fill=key, y=value, x=sampleCol)) +
geom_bar(position="fill", stat="identity") +
scale_fill_manual(values=colors) +
xlab("Samples") +
ylim(0,100) +
ylab(title)) #graphs
}
percentbarchart.plot(resGuilds, "guilds")
percentbarchart.plot <- function(result, title){
x <- colnames(result) #checks if taxa used colum exists and removes it
x <- substr(x, nchar(x)-8, nchar(x)) == 'Taxa used' #checks if taxa used colum exists and removes it
if (tail(x, n=1)==T) {
result <- result[,-ncol(result)] #and removes it
}
sampleCol <- rep(sampleNames, ncol(result)) #gets sample names
result <- tidyr::gather(result) #uses tidyr to rearrange the dataframe in a single column
result$sampleCol <- sampleCol #adds another column with the sample names
colors <- c("#CC1C00", "#5C88DA", "#84BD00", "#FFCD00", "#7C878E", "#E64B35", "#4DBBD5", "#01A087", "#3C5488", "#F39B7F", "#FF410D99", "#6EE2FF99", "#F7C53099", "#95CC5E99", "#D0DFE699", "#F79D1E99", "#748AA699")
print(ggplot2::ggplot(result, aes(fill=key, y=(value*10), x=sampleCol)) +
geom_bar(position="fill", stat="identity") +
scale_fill_manual(values=colors) +
xlab("Samples") +
ylim(0,100) +
ylab(title)) #graphs
}
percentbarchart.plot(resGuilds, "guilds")
percentbarchart.plot <- function(result, title){
x <- colnames(result) #checks if taxa used colum exists and removes it
x <- substr(x, nchar(x)-8, nchar(x)) == 'Taxa used' #checks if taxa used colum exists and removes it
if (tail(x, n=1)==T) {
result <- result[,-ncol(result)] #and removes it
}
sampleCol <- rep(sampleNames, ncol(result)) #gets sample names
result <- tidyr::gather(result) #uses tidyr to rearrange the dataframe in a single column
result$sampleCol <- sampleCol #adds another column with the sample names
colors <- c("#CC1C00", "#5C88DA", "#84BD00", "#FFCD00", "#7C878E", "#E64B35", "#4DBBD5", "#01A087", "#3C5488", "#F39B7F", "#FF410D99", "#6EE2FF99", "#F7C53099", "#95CC5E99", "#D0DFE699", "#F79D1E99", "#748AA699")
print(ggplot2::ggplot(result, aes(fill=key, y=value, x=sampleCol)) +
geom_bar(position="fill", stat="identity") +
scale_fill_manual(values=colors) +
xlab("Samples") +
ylab(title)) #graphs
}
percentbarchart.plot(resGuilds, "guilds")
ips <- ips
Encoding(ips$fullspecies) <- "latin1"
ips$fullspecies
Encoding(as.character(ips$fullspecies)) <- "latin1"
Encoding(as.character(ips$fullspecies)) <- "latin1"
ips$fullspecies <- as.character(ips$fullspecies)
Encoding(fullspecies) <- "latin1"
Encoding(ips$fullspecies) <- "latin1"
ips$fullspecies
View(ips)
ips$fullspecies <- iconv(
ips$fullspecies,
"latin1",
"UTF-8"
)
View(ips)
usethis::use_data(ips, overwrite = T)
tdi <- tdi
tdi$fullspecies <- as.character(tdi$fullspecies)
tdi$fullspecies
Encoding(tdi$fullspecies) <- "latin1"
tdi$fullspecies <- iconv(
tdi$fullspecies,
"latin1",
"UTF-8"
)
usethis::use_data(tdi, overwrite = T)
resultLoad <- diat_loadData()
vandam.results <- diat_vandam(resultmat)
vandam.results <- diat_vandam(resultLoad)
View(vandam.results)
vdamSalinity <- vandam.results[,startsWtih(colnames(vandam.results),"VD.Salinity")]
vdamSalinity <- vandam.results[,startsWith(colnames(vandam.results),"VD.Salinity")]
View(vdamSalinity)
vdamNHeterotrophy <- vandam.results[,startsWith(colnames(vandam.results),"VD.N.Het")]
vdamOxygen <- vandam.results[,startsWith(colnames(vandam.results),"VD.Oxygen")]
vdamSaprobity <- vandam.results[,startsWith(colnames(vandam.results),"VD.Saprobity")]
vdamAero <- vandam.results[,startsWith(colnames(vandam.results),"VD.Aero")]
vdamTrophic <- vandam.results[,startsWith(colnames(vandam.results),"VD.Trophic")]
View(vdamNHeterotrophy)
View(vdamOxygen)
vdamSalinity <- vdamSalinity[1:(ncol(vdamSalinity)-1)]
View(vdamSalinity)
#load
devtools::load_all()
species_df <- as.data.frame(read.csv("C:/Users/Juaco/Desktop/Calibracion DiaThor/calibracionDiaThor.csv"))
resultsPath <- "C:/Users/Juaco/Desktop/OutCalibracion"
resultLoad <- diat_loadData(species_df, resultsPath = "C:/Users/Juaco/Desktop/OutCalibracion")
percentbarchart.plot <- function(result, title){
x <- colnames(result) #checks if taxa used colum exists and removes it
x <- substr(x, nchar(x)-8, nchar(x)) == 'Taxa used' #checks if taxa used colum exists and removes it
if (tail(x, n=1)==T) {
result <- result[,-ncol(result)] #and removes it
}
sampleCol <- rep(sampleNames, ncol(result)) #gets sample names
result <- tidyr::gather(result) #uses tidyr to rearrange the dataframe in a single column
result$sampleCol <- sampleCol #adds another column with the sample names
colors <- c("#CC1C00", "#5C88DA", "#84BD00", "#FFCD00", "#7C878E", "#E64B35", "#4DBBD5", "#01A087", "#3C5488", "#F39B7F", "#FF410D99", "#6EE2FF99", "#F7C53099", "#95CC5E99", "#D0DFE699", "#F79D1E99", "#748AA699")
key <- result$key
value <- result$value
print(ggplot2::ggplot(result, aes(fill=key, y=value, x=sampleCol)) +
geom_bar(position="fill", stat="identity") +
scale_fill_manual(values=colors) +
xlab("Samples") +
ylab(title)) #graphs
}
resGuilds <- diat_guilds(resultLoad)
sampleNames <- resultLoad[[3]]
percentbarchart.plot(resGuilds, sampleNames)
#get version number of latest Diat.Barcode
dic <- read.csv("http://www.francoiskeck.fr/work/diatbarcode/dic_version.csv", header = TRUE, stringsAsFactors = FALSE)
dic
library(diathor)
devtools::check( args = "--no-examples")
devtools::check( args = "--no-examples")
devtools::run_examples()
devtools::run_examples()
devtools::run_examples()
devtools::run_examples()
diat_findAcronyms()
devtools::run_examples()
devtools::run_examples()
diat_loadData(diat_sampleData)
diat_loadData(diat_sampleData, resultsPath = "C:/Output")
library(diathor)
loadedData <- diat_loadData(diat_sampleData)
desResults <- diat_des(loadedData)
getwd
getwd()
paste(getwd(), "/Output")
paste(getwd(), "/Output", sep="")
diat_loadData(diat_sampleData, resultPath = resultFolder)
diat_loadData(diat_sampleData, resultsPath = resultFolder)
resultFolder <- paste(getwd(), "/Output", sep="")
diat_loadData(diat_sampleData, resultsPath = resultFolder)
diat_loadData(diat_sampleData, resultsPath = resultFolder)
resultFolder <- paste(getwd(), "../Output", sep="")
diat_loadData(diat_sampleData, resultsPath = resultFolder)
resultFolder
resultFolder <- paste(getwd(), "./Output", sep="")
diat_loadData(diat_sampleData, resultsPath = resultFolder)
resultFolder
getwd()
paste(getwd(..), "/Output", sep="")
paste(getwd(setwd('..')), "/Output", sep="")
setwd('..')
getwd(setwd('..'))
getwd()
setwd("D:/Users/Juaco/Google Drive/R Scripts/Paquetes propios/DiaThor/DiaThor - Git+CRAN/DiaThor")
getwd()
dir.create(getwd(), "Output")
getwd()
dir.create("Output")
diat_loadData(diat_sampleData, resultsPath = resultFolder)
devtools::run_examples()
diat_loadData(diat_sampleData, resultsPath = resultFolder, showWarnings = FALSE)
dir.create("Output", showWarnings = FALSE)
devtools::run_examples()
devtools::run_examples()
devtools::run_examples()
dir.create("Output/VD", showWarnings = FALSE)
dir.create("OutputVD", showWarnings = FALSE)
devtools::run_examples()
R CMD check --as-cran
check --as-cran
CMD check --as-cran
check(--as-cran)
?check
check(cran=T)
check()
check(diathor)
R.Version()
R.Version
R.version
R.version
#load
devtools::load_all()
.libPaths()
#load
devtools::load_all()
install.packages("devtools")
#load
devtools::load_all()
install.packages("assertthat")
#load
devtools::load_all()
install.packages("crayon")
#load
devtools::load_all()
install.packages("fansi")
#load
devtools::load_all()
install.packages("glue")
#load
devtools::load_all()
install.packages("memoise")
#load
devtools::load_all()
install.packages(c("digest", "dplyr", "ggfortify", "ggpubr"))
#load
devtools::load_all()
install.packages("R6")
#load
devtools::load_all()
install.packages("prettyunits")
#load
devtools::load_all()
install.packages("desc")
#load
devtools::load_all()
install.packages("rprojroot")
#load
devtools::load_all()
install.packages("magrittr")
#load
devtools::load_all()
install.packages(c("ade4", "ape", "backports", "bayestestR", "bit", "bit64", "broom", "car", "carData", "chron", "clipr", "coda", "colorspace", "cowplot", "cpp11", "crosstalk", "data.table", "dbplyr", "dendextend", "diffobj", "doParallel", "e1071", "effectsize", "ellipse", "emmeans", "factoextra", "fit.models", "flextable", "forcats", "foreach", "Formula", "fs", "gdtools", "generics", "GGally", "ggeffects", "ggrepel", "git2r", "gower", "haven", "Hmisc", "hrbrthemes", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "igraph", "inline", "insight", "isoband", "iterators", "janitor", "kableExtra", "knitr", "labeling", "later", "lava", "libcoin", "lme4", "locfit", "lubridate", "lwgeom", "manipulateWidget", "MANOVA.RM", "maptools", "matrixStats", "mice", "mnormt", "modelr", "multcomp", "mvtnorm", "nloptr", "officer", "OpenMx", "openssl", "openxlsx", "parameters", "partykit", "pbkrtest", "performance", "pillar", "pkgKitten", "plotrix", "pls", "plyr", "profvis", "promises", "psych", "purrr", "quantreg", "R.methodsS3", "R.oo", "RcppParallel", "RCurl", "readr", "recipes", "reshape2", "rex", "rgdal", "rgeos", "rgl", "rJava", "rmarkdown", "robust", "robustbase", "rpf", "rrcov", "RSQLite", "rstudioapi", "RVAideMemoire", "rvest", "rvg", "sandwich", "scales", "sem", "sf", "shiny", "sjlabelled", "sp", "SQUAREM", "StanHeaders", "stringdist", "stringi", "survival", "svglite", "sys", "systemfonts", "tibble", "tidyr", "tikzDevice", "tinytest", "tinytex", "TTR", "units", "uuid", "vdiffr", "WGCNA", "xfun", "xlsx", "XML", "xml2", "xts", "zip", "zoo"))
#load
devtools::load_all()
install.packages("sessioninfo")
#load
devtools::load_all()
install.packages("vegan")
install.packages("tidyr")
install.packages("ggplot2")
#load
devtools::load_all()
rlang::last_error()
library(roxygen2)
roxygen2::roxygenise()
install.packages("roxygen2")
roxygen2::roxygenise()
install.packages("string")
install.packages("stringr")
roxygen2::roxygenise()
install.packages("Rcpp")
roxygen2::roxygenise()
devtools::document()
install.packages("vegan")
devtools::document()
library(vegan)
devtools::document()
rlang::last_error()
#load
devtools::load_all()
diathorAll(plotAll = F)
install.packages("Rtools")
devtools::document()
R.version
R.version
Sys.which("make")
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
Sys.which("make")
roxygen2::roxygenise()
devtools::document()
install.packages("vegan")
devtools::document()
library(devtools)
require(devtools)
library(vegan)
devtools::document()
utils::install.packages(diathor)
usethis::use_package("vegan")
install.packages("vegab")
usethis::use_package("vegan")
install.packages("vegan")
usethis::use_package("vegan")
library(vegan)
install.packages("permute")
library(vegan)
library(ggplot2)
install.packages("gtable")
library(ggplot2)
detach("package:ggplot2", unload = TRUE)
install.packages("lifecycle")
library(ggplot2)
install.packages("munsell")
library(ggplot2)
install.packages("pkgconfig")
library(ggplot2)
detach("package:ggplot2", unload = TRUE)
install.packages("rcmdcheck")
library(tidyr)
detach("package:tidyr", unload = TRUE)
install.packages("xopen")
#load
devtools::load_all()
diathorAll(plotAll = F)
library(diathor)
detach("package:diathor", unload = TRUE)
remove.packages("diathor")
#load
devtools::load_all()
diathorAll(plotAll = F)
diathor::diaThorAll()
install.packages("farver")
diathor::diaThorAll()
diathor::diaThorAll()
resultsPath <- "C:/Users/Juaco/Desktop/OutCalibracion"
species_df <- as.data.frame(read.csv("C:/Users/Juaco/Desktop/Calibracion DiaThor/calibracionDiaThor.csv"))
diathor::diaThorAll(species_df, resultsPath = resultsPath)
rhub::check_for_cran()
install.packages("rhub")
rhub::check_for_cran()
install.packages("parsedate")
rhub::check_for_cran()
install.packages("rappdirs")
rhub::check_for_cran()
install.packages("rematch")
rhub::check_for_cran()
install.packages("whoami")
rhub::check_for_cran()
install.packages("curl")
rhub::check_for_cran()
devtools::load_all()
diaThorAll()
rhub::check_for_cran()
devtools::release()
usethis::use_readme_rmd()
install.packages("rmarkdown")
usethis::use_readme_rmd()
library(rmarkdown)
install.packages("evaluate")
library(rmarkdown)
usethis::use_readme_rmd()
install.packages("whisker")
usethis::use_readme_rmd().
usethis::use_readme_rmd()
install.packages("yaml")
devtools::release()
data("diat_sampleData")
loadedData <- diat_loadData(diat_sampleData, resultsPath = "")
diat_loadData(diat_sampleData, resultsPath = "")
loadedData <- diathor::diat_loadData(diat_sampleData, resultsPath = "")
devtools::load_all(".")
loadedData <- diat_loadData(diat_sampleData, resultsPath = "")
loadedData <- diat_loadData(diat_sampleData, resultsPath = "")
loadedData <- diat_loadData(diat_sampleData, resultsPath = "/Output")
loadedData <- diat_loadData(diat_sampleData, resultsPath = tempdir())
file.path(tempdir())
tdiResults <- diat_tdi(loadedData)
View(tdiResults)
roxygen2::roxygenise()
example("diaThorAll", ppackage = "diathor")
example("diaThorAll")
devtools::load_all(".")
example("diaThorAll")
example("diathorAll")
example("diaThorAll", package = "diathor")
example("diaThorAll", package = diathor)
example("diathor")
example(package = "diathor")
library(diathor)
example("diathor")
example("diathorAll")
example("diaThor")
example("diat_idp")
example(diat_idp)
data("diat_sampleData")
df <- diat_loadData(diat_sampleData, resultsPath = tempfile())
devtools::load_all(".")
df <- diat_loadData(diat_sampleData, resultsPath = tempfile())
df <- diat_loadData(diat_sampleData, resultsPath = tempfile())
df <- diat_loadData(diat_sampleData, resultsPath = tempdir())
desResults <- diat_des(df)
data("diat_sampleData")
df <- diat_loadData(diat_sampleData, resultsPath = tempdir())
epidResults <- diat_epid(df)
@keywords ecology diatom bioindicator bio
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
data("diat_sampleData")
df <- diat_loadData(diat_sampleData, resultsPath = tempdir())
guildsResults <- diat_guilds(df)
roxygen2::roxygenise()
devtools::run_examples()
allResults <- diaThorAll(diat_sampleData, resultsPath = tempdir())
devtools::release_checks()
devtools::release()
devtools::release()
rhub::check_for_cran()
check_win_devel()
devtools::check_win_devel()
devtools::release()
devtools::release()
devtools::check_win_devel()
roxygen2::roxygenise()
rhub::check_on_debian()
devtools::release()
devtools::run_examples()
devtools::release()
#load
devtools::load_all()
resultsPath <- "C:/Users/Juaco/Desktop/OutCalibracion"
species_df <- as.data.frame(read.csv("C:/Users/Juaco/Desktop/Calibracion DiaThor/calibracionDiaThor.csv"))
diathor::diaThorAll(species_df, resultsPath = resultsPath, exportFormat = 1)
diathor::diaThorAll(species_df, resultsPath = resultsPath, exportFormat = 1)
diathor::diaThorAll(species_df, resultsPath = resultsPath, exportFormat = 2)
resutadosTodo <- diaThorAll(species_df, resultsPath = resultsPath, exportFormat = 2)
View(resutadosTodo)
resutadosTodo <- diaThorAll(species_df, resultsPath = resultsPath, exportFormat = 2, singleResult = F)
View(resutadosTodo)
View(resutadosTodo)
View(resutadosTodo)
View(resutadosTodo)
.Rversion()
Rversion()
R.Version()
roxygen2::roxygenise()
roxygen2::roxygenise()
install.packages("Rdpack")
library(Rdpack)
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
roxygen2::roxygenize()
devtools::release()
devtools::release()
devtools::release()
roxygen2::roxygenise()
devtools::release()
distancias <- read.csv(file.choose(), sep=";")
View(distancias)
library(ggplot2)
ggplot( aes(x=matrix, y=LM, fill=matrix)) + geom_boxplot()
ggplot( aes(x=distancias$matrix, y=distancias$LM, fill=distancias$matrix)) + geom_boxplot()
distancias %>%
ggplot( aes(x=matrix, y=LM, fill=matrix))
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
boxplot(distancias)
boxplot(distancias$LM)
boxplot(distancias$LM~distancias$matrix)
plot(distancias$matrix~distancias$LM)
plot(distancias$LM~distancias$matrix)
boxplot(distancias$LM~distancias$matrix)
str(distancias)
roxygen2::roxygenise()
use_cran_comments()
devtools::use_cran_comments()
data("diat_sampleData")
# First, the diat_Load() function has to be called to read the data
# The data will be stored into a list (loadedData)
# And an output folder will be selected through a dialog box if resultsPath is empty
# In the example, a temporary directory will be used in resultsPath
df <- diat_loadData(diat_sampleData, resultsPath = tempdir())
desResults <- diat_des(df)
# Example using sample data included in the package (sampleData):
data("diat_sampleData")
# First, the diat_Load() function has to be called to read the data
# The data will be stored into a list (loadedData)
# And an output folder will be selected through a dialog box if resultsPath is empty
# In the example, a temporary directory will be used in resultsPath
df <- diat_loadData(diat_sampleData, resultsPath = tempdir())
vandamResults <- diat_vandam(df)
roxygen2::roxygenise()
devtools::release()
data("diat_sampleData")
roxygen2::roxygenise()
devtools::release()
devtools::release()
roxygen2::roxygenise
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
devtools::release()
install.packages("diathor")
